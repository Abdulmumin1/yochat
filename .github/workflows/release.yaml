name: Go Cross-Compile

on:
  push:
    tags:
      - "*"
    branches:
      - master

jobs:
  build:
    name: Build ${{ matrix.os }}/${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [arm64, x64]

        include:
          - os: linux
            arch: arm64
          - os: linux
            arch: x64
          - os: darwin
            arch: x64
          - os: darwin
            arch: arm64
          - os: windows
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build Go application
        id: build_app
        run: |
          APP_NAME="yochat"


          export GOOS=${{ matrix.os }}


          GO_ARCH_FOR_COMPILER=""
          if [ "${{ matrix.arch }}" = "x64" ]; then
            GO_ARCH_FOR_COMPILER="amd64"
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            GO_ARCH_FOR_COMPILER="arm64"
          else
            echo "Error: Unknown architecture for Go compiler: ${{ matrix.arch }}"
            exit 1
          fi
          export GOARCH="$GO_ARCH_FOR_COMPILER"

          echo "Building for $GOOS/$GOARCH..."

          EXECUTABLE_NAME="${APP_NAME}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            EXECUTABLE_NAME="${EXECUTABLE_NAME}.exe"
          fi



          CGO_ENABLED=0 go build -o "${EXECUTABLE_NAME}" ./main.go


          echo "Built executable details:"
          ls -lh "${EXECUTABLE_NAME}"



          ARTIFACT_ARCH="${{ matrix.arch }}"


          ARTIFACT_NAME="${APP_NAME}-${{ matrix.os }}-${ARTIFACT_ARCH}"


          echo "executable_name=$EXECUTABLE_NAME" >> "$GITHUB_OUTPUT"
          echo "artifact_name=$ARTIFACT_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload compiled binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_app.outputs.artifact_name }}

          path: ${{ steps.build_app.outputs.executable_name }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # This job depends on the 'build' job. It will only run after all matrix builds are complete.
    needs: build
    # Only run this job if all preceding jobs (the 'build' jobs) succeeded.
    if: success()

    steps:
      - name: Checkout code
        # Checks out the repository code.
        # fetch-depth: 0 is important to fetch all tags, which is needed for the release action.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        # Downloads all artifacts that were uploaded by the 'build' job.
        # All artifacts will be downloaded into the './artifacts' directory,
        # with each artifact in its own subdirectory (e.g., ./artifacts/yochat-linux-x64/yochat).
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release and Upload Assets
        # This action creates a new GitHub Release and uploads the downloaded artifacts as assets.
        uses: softprops/action-gh-release@v1
        with:
          # The tag_name is automatically derived from the Git tag that triggered the workflow.
          tag_name: ${{ github.ref_name }}
          # The name of the release.
          name: Release ${{ github.ref_name }}
          # The body of the release notes. You can customize this with more details.
          body: |
            ## Release Notes for ${{ github.ref_name }}

            This release includes cross-compiled binaries for various platforms.

            ### Assets:
            - `yochat-linux-arm64`
            - `yochat-linux-x64`
            - `yochat-darwin-x64`
            - `yochat-darwin-arm64`
            - `yochat-windows-x64.exe`

            Thank you for using yochat!
          draft: false # Set to true if you want to create a draft release first.
          prerelease: false # Set to true if this is a pre-release.
          # Specifies the files to upload as release assets.
          # The pattern './artifacts/*/*' will pick up all files within the subdirectories
          # created by the 'download-artifact' action (e.g., ./artifacts/yochat-linux-x64/yochat).
          files: ./artifacts/*/*
        env:
          # GITHUB_TOKEN is a special token provided by GitHub Actions with permissions
          # to create releases and upload assets to the repository.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
