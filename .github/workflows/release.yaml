name: Go Cross-Compile

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build ${{ matrix.os }}/${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64, 386]
        exclude:
          - os: windows
            arch: arm64
          - os: darwin
            arch: 386

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build Go application
        run: |
          # Set environment variables for cross-compilation
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}

          # Define the output directory and create it
          OUTPUT_DIR="yochat"
          mkdir -p "$OUTPUT_DIR"

          # Define the output filename for the executable
          EXECUTABLE_NAME="yochat"
          if [ "${{ matrix.os }}" = "windows" ]; then
            EXECUTABLE_NAME="${EXECUTABLE_NAME}.exe"
          fi

          # Build the Go application into the new directory
          echo "Building for $GOOS/$GOARCH..."
          CGO_ENABLED=0 go build -o "${OUTPUT_DIR}/${EXECUTABLE_NAME}" ./main.go

          # Verify the built binary
          echo "Built executable details:"
          ls -lh "${OUTPUT_DIR}/${EXECUTABLE_NAME}"

      - name: Upload compiled binary as artifact
        uses: actions/upload-artifact@v4
        with:
          # The name of the artifact (e.g., yochat-linux-amd64)
          name: yochat-${{ matrix.os }}-${{ matrix.arch }}
          # Path to the directory to upload. This will create a 'yochat' folder in the artifact.
          path: yochat
