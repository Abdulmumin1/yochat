name: Go Cross-Compile and Release

on:
  # This workflow is ONLY triggered when a new tag matching 'v*.*' is pushed.
  # For example, pushing a tag like 'v1.0', 'v2.5', etc., will start this workflow.
  push:
    tags:
      - "v*.*"

jobs:
  build:
    name: Build ${{ matrix.os }}/${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [arm64, x64]
        include:
          - os: linux
            arch: arm64
          - os: linux
            arch: x64
          - os: darwin
            arch: x64
          - os: darwin
            arch: arm64
          - os: windows
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build Go application
        id: build_app
        run: |
          APP_NAME="yochat"
          export GOOS=${{ matrix.os }}

          GO_ARCH_FOR_COMPILER=""
          if [ "${{ matrix.arch }}" = "x64" ]; then
            GO_ARCH_FOR_COMPILER="amd64"
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            GO_ARCH_FOR_COMPILER="arm64"
          else
            echo "Error: Unknown architecture for Go compiler: ${{ matrix.arch }}"
            exit 1
          fi
          export GOARCH="$GO_ARCH_FOR_COMPILER"

          echo "Building for $GOOS/$GOARCH..."

          EXECUTABLE_NAME="${APP_NAME}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            EXECUTABLE_NAME="${EXECUTABLE_NAME}.exe"
          fi

          CGO_ENABLED=0 go build -o "${EXECUTABLE_NAME}" ./main.go

          echo "Built executable details:"
          ls -lh "${EXECUTABLE_NAME}"

          ARTIFACT_ARCH="${{ matrix.arch }}"
          ARTIFACT_NAME="${APP_NAME}-${{ matrix.os }}-${ARTIFACT_ARCH}"

          echo "executable_name=$EXECUTABLE_NAME" >> "$GITHUB_OUTPUT"
          echo "artifact_name=$ARTIFACT_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload compiled binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_app.outputs.artifact_name }}
          path: ${{ steps.build_app.outputs.executable_name }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    # This condition is crucial: only run the release job if the workflow was triggered by a tag push.
    # github.event_name == 'push' and startsWith(github.ref, 'refs/tags/') ensures it's a tag push.
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for gh cli to access full git history and tags

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release and Upload Assets using gh CLI
        # The GitHub CLI (gh) is pre-installed on GitHub-hosted runners.
        # We set the GH_TOKEN environment variable for authentication.
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ github.ref_name }}"
          RELEASE_TITLE="Release ${TAG_NAME}"
          RELEASE_BODY=$(cat <<EOF
            ## Release Notes for ${TAG_NAME}

            This release includes cross-compiled binaries for various platforms.

            ### Assets:
            - `yochat-linux-arm64`
            - `yochat-linux-x64`
            - `yochat-darwin-x64`
            - `yochat-darwin-arm64`
            - `yochat-windows-x64.exe`

            Thank you for using yochat!
          EOF
          )

          # Create the release using gh CLI
          # --notes-file - creates a temporary file for the release notes
          # ./artifacts/*/* provides a glob pattern to upload all files in the subdirectories
          gh release create "${TAG_NAME}" \
            --title "${RELEASE_TITLE}" \
            --notes "${RELEASE_BODY}" \
            --draft=false \
            --prerelease=false \
            ./artifacts/*/*

          echo "GitHub Release created successfully for tag: ${TAG_NAME}"
