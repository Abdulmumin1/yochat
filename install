#!/bin/bash

# --- Configuration ---
APP_NAME="yochat"
INSTALL_DIR="$HOME/.local/bin"
TEMP_DIR=$(mktemp -d) # Create a temporary directory for downloads and extraction

# --- Styling for messages ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
ORANGE='\033[38;2;255;140;0m' # Define ORANGE for consistency
NC='\033[0m' # No Color

# --- Helper Functions ---
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# --- Cleanup function to run on exit ---
cleanup() {
    if [ -d "$TEMP_DIR" ]; then
        log_info "Cleaning up temporary files..."
        rm -rf "$TEMP_DIR"
        log_info "Temporary files removed."
    fi
}

# Register the cleanup function to be called on script exit (success or failure)
trap cleanup EXIT

# --- Path addition helper ---
add_to_path() {
    local config_file=$1
    local command=$2

    if grep -Fxq "$command" "$config_file"; then
        log_info "Command already exists in $config_file, skipping write."
    elif [[ -w $config_file ]]; then
        echo -e "\n# $APP_NAME" >> "$config_file"
        echo "$command" >> "$config_file"
        log_info "Successfully added ${ORANGE}$APP_NAME ${GREEN}to \$PATH in $config_file"
    else
        log_warn "Manually add the directory to $config_file (or similar):"
        log_info "  $command"
    fi
}

# --- Pre-checks ---
check_prerequisites() {
    if ! command -v curl &> /dev/null; then
        log_error "curl is not installed. Please install curl to proceed (e.g., 'sudo apt install curl' on Debian/Ubuntu, 'sudo yum install curl' on Fedora/CentOS, or 'brew install curl' on macOS)."
    fi
    if ! command -v unzip &> /dev/null; then
        log_error "unzip is not installed. Please install unzip to proceed (e.g., 'sudo apt install unzip' on Debian/Ubuntu, 'sudo yum install unzip' on Fedora/CentOS, or 'brew install unzip' on macOS)."
    fi
    log_info "All necessary tools found."
}

main() {
    check_prerequisites

    # 1. GitHub repository details
    local GITHUB_USER="Abdulmumin1" # Assuming this is correct
    local GITHUB_REPO="yochat"     # Assuming this is correct

    # 2. Determine OS and Architecture
    local os_type=$(uname -s | tr '[:upper:]' '[:lower:]')
    local arch_type=$(uname -m)

    if [[ "$os_type" == "darwin" ]]; then
        os_type="darwin"
    fi

    if [[ "$arch_type" == "aarch64" ]]; then
      arch_type="arm64"
    elif [[ "$arch_type" == "x86_64" ]]; then
      arch_type="x64" # Consistent with opencode's x64 for Intel
    fi

    local filename="$APP_NAME-$os_type-$arch_type.zip"

    case "$filename" in
        *"-linux-"*)
            [[ "$arch_type" == "x64" || "$arch_type" == "arm64" ]] || log_error "Unsupported Linux architecture: $arch_type"
        ;;
        *"-darwin-"*)
            [[ "$arch_type" == "x64" || "$arch_type" == "arm64" ]] || log_error "Unsupported macOS architecture: $arch_type"
        ;;
        *)
            log_error "Unsupported OS/Arch: $os_type/$arch_type. This script supports Linux and macOS."
        ;;
    esac

    # 3. Fetch latest release tag
    log_info "Fetching latest release information from GitHub..."
    local API_URL="https://api.github.com/repos/${GITHUB_USER}/${GITHUB_REPO}/releases/latest"
    local RELEASE_INFO=$(curl -s "$API_URL")

    if [ -z "$RELEASE_INFO" ]; then
        log_error "Failed to fetch release information from $API_URL. Please check GitHub username/repository name and your internet connection."
    fi

    # Extract tag_name, removing 'v' prefix if present
    local specific_version=$(echo "$RELEASE_INFO" | grep '"tag_name":' | head -n 1 | sed -E 's/.*"tag_name": "([^"]+)".*/\1/' | sed 's/^v//')

    if [ -z "$specific_version" ]; then
        log_error "Could not find the latest release tag. Ensure the repository has public releases."
    fi
    log_info "Latest release version found: ${YELLOW}$specific_version${NC}"

    # 4. Check if the specific version is already installed
    check_version() {
        if command -v "$APP_NAME" >/dev/null 2>&1; then
            # Assuming '$APP_NAME version' outputs something like "yochat version 1.0.0" or "v1.0.0"
            local installed_version_output=$("$APP_NAME" version 2>&1)
            # Extract version number (e.g., 1.0.0) from the output
            local installed_version=$(echo "$installed_version_output" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1)

            if [ -z "$installed_version" ]; then
                log_warn "Could not determine installed $APP_NAME version from output: '$installed_version_output'. Proceeding with installation."
                return 0 # Allow installation to proceed if version can't be determined
            fi

            if [[ "$installed_version" == "$specific_version" ]]; then
                log_info "Version ${YELLOW}$specific_version${GREEN} already installed."
                exit 0 # Exit if exact version is already installed
            else
                log_info "Installed version: ${YELLOW}$installed_version${NC}. New version available: ${YELLOW}$specific_version${NC}."
            fi
        fi
    }
    check_version

    # 5. Construct download URL
    local DOWNLOAD_URL="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/releases/download/v${specific_version}/${filename}" # Add 'v' back for download URL

    log_info "Downloading ${ORANGE}$APP_NAME ${GREEN}version: ${YELLOW}$specific_version${GREEN} from: ${ORANGE}$DOWNLOAD_URL${NC}..."

    # 6. Download the application
    cd "$TEMP_DIR" || log_error "Failed to change to temporary directory."
    curl -# -L -o "$filename" "$DOWNLOAD_URL"
    if [ $? -ne 0 ]; then
        log_error "Failed to download $APP_NAME from $DOWNLOAD_URL. Please verify the URL and that the asset exists for your OS/architecture."
    fi
    log_info "Downloaded $filename to $TEMP_DIR"

    # 7. Extract the application
    log_info "Extracting $APP_NAME..."
    unzip -q "$filename"
    if [ $? -ne 0 ]; then
        log_error "Failed to extract $filename. The archive might be corrupted or in an unexpected format."
    fi

    # 8. Create ~/.local/bin if it doesn't exist
    log_info "Ensuring installation directory exists: $INSTALL_DIR"
    mkdir -p "$INSTALL_DIR"
    if [ $? -ne 0 ]; then
        log_error "Failed to create directory $INSTALL_DIR. Check user permissions for your home directory."
    fi

    # 9. Move executable to ~/.local/bin and grant permissions (opencode approach)
    # This assumes the executable 'yochat' is directly in the unzipped directory.
    log_info "Moving $APP_NAME to $INSTALL_DIR and setting execute permissions..."
    mv "$APP_NAME" "$INSTALL_DIR/$APP_NAME"
    if [ $? -ne 0 ]; then
        log_error "Failed to move $APP_NAME to $INSTALL_DIR. This might happen if '$APP_NAME' isn't directly in the unzipped folder. Check permissions for $INSTALL_DIR or the zip file structure."
    fi
    chmod +x "$INSTALL_DIR/$APP_NAME"
    log_info "$APP_NAME successfully moved and made executable."

    # 10. Update PATH environment variable (opencode approach for PATH handling)
    log_info "Checking and updating PATH environment variable..."
    local XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}

    local current_shell=$(basename "$SHELL")
    local config_files_to_check=""

    case "$current_shell" in
        fish)
            config_files_to_check="$HOME/.config/fish/config.fish"
        ;;
        zsh)
            config_files_to_check="$HOME/.zshrc $HOME/.zshenv $XDG_CONFIG_HOME/zsh/.zshrc $XDG_CONFIG_HOME/zsh/.zshenv"
        ;;
        bash)
            config_files_to_check="$HOME/.bashrc $HOME/.bash_profile $HOME/.profile $XDG_CONFIG_HOME/bash/.bashrc $XDG_CONFIG_HOME/bash/.bash_profile"
        ;;
        ash|sh)
            config_files_to_check="$HOME/.ashrc $HOME/.profile /etc/profile"
        ;;
        *)
            log_warn "Unsupported shell ($current_shell). Attempting to use common bash/zsh config files as fallback."
            config_files_to_check="$HOME/.bashrc $HOME/.bash_profile $HOME/.zshrc" # Fallback for unknown shells
        ;;
    esac

    local found_config_file=""
    for file in $config_files_to_check; do
        if [[ -f "$file" ]]; then
            found_config_file="$file"
            break
        fi
    done

    if [[ -z "$found_config_file" ]]; then
        log_warn "No suitable config file found for $current_shell. Checked files: $config_files_to_check"
        log_warn "Manually add the directory to your shell's configuration file (e.g., ~/.bashrc, ~/.zshrc):"
        log_info "  export PATH=\"$INSTALL_DIR:\$PATH\""
    else
        if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
            case "$current_shell" in
                fish)
                    add_to_path "$found_config_file" "fish_add_path $INSTALL_DIR"
                ;;
                zsh|bash|ash|sh)
                    add_to_path "$found_config_file" "export PATH=$INSTALL_DIR:\$PATH"
                ;;
                *) # Fallback for unknown shells, will have warned already
                    export PATH="$INSTALL_DIR:$PATH"
                    log_warn "PATH updated for current session. Manually add the directory to $found_config_file (or similar):"
                    log_info "  export PATH=$INSTALL_DIR:\$PATH"
                ;;
            esac
        else
            log_info "$INSTALL_DIR is already in your PATH. No changes needed to config file."
        fi
    fi

    # Add to GITHUB_PATH if running in GitHub Actions
    if [ -n "${GITHUB_ACTIONS-}" ] && [ "${GITHUB_ACTIONS}" == "true" ]; then
        echo "$INSTALL_DIR" >> "$GITHUB_PATH"
        log_info "Added $INSTALL_DIR to \$GITHUB_PATH for GitHub Actions."
    fi

    log_info "Installation complete!"
    log_info "To verify, please open a NEW terminal window and type: ${GREEN}$APP_NAME${NC}"
    log_info "If you encounter any issues, you can follow the manual Installation guide"
    log_info "You can also add alias for ${YELLOW}$APP_NAME${NC} as ${YELLOW}chat${NC} by adding 'alias chat=$APP_NAME' to your shell config."
}

# --- Run the main function ---
main
